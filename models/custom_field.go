// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomField custom field
//
// swagger:model CustomField
type CustomField struct {

	// The canonical name for a Shortcut-defined field.
	CanonicalName string `json:"canonical_name,omitempty"`

	// The instant when this CustomField was created.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created_at"`

	// A string description of the CustomField
	// Max Length: 512
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// When true, the CustomField can be applied to entities in the Workspace.
	// Required: true
	Enabled *bool `json:"enabled"`

	// A string description of this resource.
	// Required: true
	// Enum: [custom-field]
	EntityType *string `json:"entity_type"`

	// The type of Custom Field, eg. 'enum'.
	// Required: true
	// Enum: [enum]
	FieldType *string `json:"field_type"`

	// When true, the CustomFieldEnumValues may not be reordered.
	FixedPosition bool `json:"fixed_position,omitempty"`

	// A string that represents the icon that corresponds to this custom field.
	// Max Length: 63
	// Min Length: 1
	IconSetIdentifier string `json:"icon_set_identifier,omitempty"`

	// The unique public ID for the CustomField.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The name of the Custom Field.
	// Required: true
	// Max Length: 63
	// Min Length: 1
	Name *string `json:"name"`

	// An integer indicating the position of this Custom Field with respect to the other CustomField
	// Required: true
	Position *int64 `json:"position"`

	// The types of stories this CustomField is scoped to.
	StoryTypes []string `json:"story_types"`

	// The instant when this CustomField was last updated.
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated_at"`

	// A collection of legal values for a CustomField.
	Values []*CustomFieldEnumValue `json:"values"`
}

// Validate validates this custom field
func (m *CustomField) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconSetIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomField) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", m.Description, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", m.Description, 512); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var customFieldTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["custom-field"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFieldTypeEntityTypePropEnum = append(customFieldTypeEntityTypePropEnum, v)
	}
}

const (

	// CustomFieldEntityTypeCustomDashField captures enum value "custom-field"
	CustomFieldEntityTypeCustomDashField string = "custom-field"
)

// prop value enum
func (m *CustomField) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customFieldTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomField) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntityTypeEnum("entity_type", "body", *m.EntityType); err != nil {
		return err
	}

	return nil
}

var customFieldTypeFieldTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enum"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFieldTypeFieldTypePropEnum = append(customFieldTypeFieldTypePropEnum, v)
	}
}

const (

	// CustomFieldFieldTypeEnum captures enum value "enum"
	CustomFieldFieldTypeEnum string = "enum"
)

// prop value enum
func (m *CustomField) validateFieldTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customFieldTypeFieldTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomField) validateFieldType(formats strfmt.Registry) error {

	if err := validate.Required("field_type", "body", m.FieldType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFieldTypeEnum("field_type", "body", *m.FieldType); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateIconSetIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.IconSetIdentifier) { // not required
		return nil
	}

	if err := validate.MinLength("icon_set_identifier", "body", m.IconSetIdentifier, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("icon_set_identifier", "body", m.IconSetIdentifier, 63); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 63); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated_at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomField) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this custom field based on the context it is used
func (m *CustomField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomField) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Values); i++ {

		if m.Values[i] != nil {
			if err := m.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomField) UnmarshalBinary(b []byte) error {
	var res CustomField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
