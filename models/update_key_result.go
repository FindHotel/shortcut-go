// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateKeyResult update key result
//
// swagger:model UpdateKeyResult
type UpdateKeyResult struct {

	// initial observed value
	InitialObservedValue *KeyResultValue `json:"initial_observed_value,omitempty"`

	// The name of the Key Result.
	Name string `json:"name,omitempty"`

	// observed value
	ObservedValue *KeyResultValue `json:"observed_value,omitempty"`

	// target value
	TargetValue *KeyResultValue `json:"target_value,omitempty"`
}

// Validate validates this update key result
func (m *UpdateKeyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInitialObservedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObservedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateKeyResult) validateInitialObservedValue(formats strfmt.Registry) error {
	if swag.IsZero(m.InitialObservedValue) { // not required
		return nil
	}

	if m.InitialObservedValue != nil {
		if err := m.InitialObservedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateKeyResult) validateObservedValue(formats strfmt.Registry) error {
	if swag.IsZero(m.ObservedValue) { // not required
		return nil
	}

	if m.ObservedValue != nil {
		if err := m.ObservedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateKeyResult) validateTargetValue(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetValue) { // not required
		return nil
	}

	if m.TargetValue != nil {
		if err := m.TargetValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update key result based on the context it is used
func (m *UpdateKeyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInitialObservedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObservedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateKeyResult) contextValidateInitialObservedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.InitialObservedValue != nil {

		if swag.IsZero(m.InitialObservedValue) { // not required
			return nil
		}

		if err := m.InitialObservedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateKeyResult) contextValidateObservedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.ObservedValue != nil {

		if swag.IsZero(m.ObservedValue) { // not required
			return nil
		}

		if err := m.ObservedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateKeyResult) contextValidateTargetValue(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetValue != nil {

		if swag.IsZero(m.TargetValue) { // not required
			return nil
		}

		if err := m.TargetValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("target_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("target_value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateKeyResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateKeyResult) UnmarshalBinary(b []byte) error {
	var res UpdateKeyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
