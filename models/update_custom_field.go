// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCustomField update custom field
//
// swagger:model UpdateCustomField
type UpdateCustomField struct {

	// The ID of the CustomField we want to move this CustomField after.
	// Format: uuid
	AfterID strfmt.UUID `json:"after_id,omitempty"`

	// The ID of the CustomField we want to move this CustomField before.
	// Format: uuid
	BeforeID strfmt.UUID `json:"before_id,omitempty"`

	// A description of the purpose of this field.
	Description string `json:"description,omitempty"`

	// Indicates whether the Field is enabled for the Workspace. Only enabled fields can be applied to Stories.
	Enabled bool `json:"enabled,omitempty"`

	// A frontend-controlled string that represents the icon for this custom field.
	// Max Length: 63
	// Min Length: 1
	IconSetIdentifier string `json:"icon_set_identifier,omitempty"`

	// A collection of objects representing reporting periods for years.
	// Max Length: 63
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// A collection of EnumValue objects representing the values in the domain of some Custom Field.
	Values []*UpdateCustomFieldEnumValue `json:"values"`
}

// Validate validates this update custom field
func (m *UpdateCustomField) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAfterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeforeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIconSetIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCustomField) validateAfterID(formats strfmt.Registry) error {
	if swag.IsZero(m.AfterID) { // not required
		return nil
	}

	if err := validate.FormatOf("after_id", "body", "uuid", m.AfterID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCustomField) validateBeforeID(formats strfmt.Registry) error {
	if swag.IsZero(m.BeforeID) { // not required
		return nil
	}

	if err := validate.FormatOf("before_id", "body", "uuid", m.BeforeID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCustomField) validateIconSetIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.IconSetIdentifier) { // not required
		return nil
	}

	if err := validate.MinLength("icon_set_identifier", "body", m.IconSetIdentifier, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("icon_set_identifier", "body", m.IconSetIdentifier, 63); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCustomField) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 63); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCustomField) validateValues(formats strfmt.Registry) error {
	if swag.IsZero(m.Values) { // not required
		return nil
	}

	for i := 0; i < len(m.Values); i++ {
		if swag.IsZero(m.Values[i]) { // not required
			continue
		}

		if m.Values[i] != nil {
			if err := m.Values[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update custom field based on the context it is used
func (m *UpdateCustomField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCustomField) contextValidateValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Values); i++ {

		if m.Values[i] != nil {
			if err := m.Values[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("values" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCustomField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCustomField) UnmarshalBinary(b []byte) error {
	var res UpdateCustomField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
