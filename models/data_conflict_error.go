// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DataConflictError Error returned when Datomic tx fails due to Datomc :db.error/cas-failed error
//
// swagger:model DataConflictError
type DataConflictError struct {

	// error
	// Required: true
	// Enum: [data-conflict-error]
	Error *string `json:"error"`

	// An explanatory message: "The update failed due to a data conflict. Please refresh and try again."
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this data conflict error
func (m *DataConflictError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dataConflictErrorTypeErrorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["data-conflict-error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dataConflictErrorTypeErrorPropEnum = append(dataConflictErrorTypeErrorPropEnum, v)
	}
}

const (

	// DataConflictErrorErrorDataDashConflictDashError captures enum value "data-conflict-error"
	DataConflictErrorErrorDataDashConflictDashError string = "data-conflict-error"
)

// prop value enum
func (m *DataConflictError) validateErrorEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dataConflictErrorTypeErrorPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DataConflictError) validateError(formats strfmt.Registry) error {

	if err := validate.Required("error", "body", m.Error); err != nil {
		return err
	}

	// value enum
	if err := m.validateErrorEnum("error", "body", *m.Error); err != nil {
		return err
	}

	return nil
}

func (m *DataConflictError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this data conflict error based on context it is used
func (m *DataConflictError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DataConflictError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DataConflictError) UnmarshalBinary(b []byte) error {
	var res DataConflictError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
