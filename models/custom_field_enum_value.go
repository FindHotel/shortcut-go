// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomFieldEnumValue custom field enum value
//
// swagger:model CustomFieldEnumValue
type CustomFieldEnumValue struct {

	// A color key associated with this CustomFieldEnumValue.
	// Required: true
	ColorKey *string `json:"color_key"`

	// When true, the CustomFieldEnumValue can be selected for the CustomField.
	// Required: true
	Enabled *bool `json:"enabled"`

	// A string description of this resource.
	// Required: true
	// Enum: [custom-field-enum-value]
	EntityType *string `json:"entity_type"`

	// The unique public ID for the Custom Field.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// An integer indicating the position of this Value with respect to the other CustomFieldEnumValues in the enumeration.
	// Required: true
	Position *int64 `json:"position"`

	// A string value within the domain of this Custom Field.
	// Required: true
	// Max Length: 63
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this custom field enum value
func (m *CustomFieldEnumValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColorKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomFieldEnumValue) validateColorKey(formats strfmt.Registry) error {

	if err := validate.Required("color_key", "body", m.ColorKey); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldEnumValue) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

var customFieldEnumValueTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["custom-field-enum-value"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customFieldEnumValueTypeEntityTypePropEnum = append(customFieldEnumValueTypeEntityTypePropEnum, v)
	}
}

const (

	// CustomFieldEnumValueEntityTypeCustomDashFieldDashEnumDashValue captures enum value "custom-field-enum-value"
	CustomFieldEnumValueEntityTypeCustomDashFieldDashEnumDashValue string = "custom-field-enum-value"
)

// prop value enum
func (m *CustomFieldEnumValue) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, customFieldEnumValueTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CustomFieldEnumValue) validateEntityType(formats strfmt.Registry) error {

	if err := validate.Required("entity_type", "body", m.EntityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateEntityTypeEnum("entity_type", "body", *m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldEnumValue) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldEnumValue) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	return nil
}

func (m *CustomFieldEnumValue) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", *m.Value, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", *m.Value, 63); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this custom field enum value based on context it is used
func (m *CustomFieldEnumValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CustomFieldEnumValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomFieldEnumValue) UnmarshalBinary(b []byte) error {
	var res CustomFieldEnumValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
