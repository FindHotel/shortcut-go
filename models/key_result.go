// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeyResult key result
//
// swagger:model KeyResult
type KeyResult struct {

	// current observed value
	// Required: true
	CurrentObservedValue *KeyResultValue `json:"current_observed_value"`

	// current target value
	// Required: true
	CurrentTargetValue *KeyResultValue `json:"current_target_value"`

	// The ID of the Key Result.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// initial observed value
	// Required: true
	InitialObservedValue *KeyResultValue `json:"initial_observed_value"`

	// The name of the Key Result.
	// Required: true
	Name *string `json:"name"`

	// The Objective to which this Key Result belongs.
	// Required: true
	ObjectiveID *int64 `json:"objective_id"`

	// The integer percentage of progress toward completion of the Key Result.
	// Required: true
	Progress *int64 `json:"progress"`

	// The type of the Key Result (numeric, percent, or boolean).
	// Required: true
	// Enum: ["percent","boolean","numeric"]
	Type *string `json:"type"`
}

// Validate validates this key result
func (m *KeyResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentObservedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentTargetValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInitialObservedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectiveID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyResult) validateCurrentObservedValue(formats strfmt.Registry) error {

	if err := validate.Required("current_observed_value", "body", m.CurrentObservedValue); err != nil {
		return err
	}

	if m.CurrentObservedValue != nil {
		if err := m.CurrentObservedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *KeyResult) validateCurrentTargetValue(formats strfmt.Registry) error {

	if err := validate.Required("current_target_value", "body", m.CurrentTargetValue); err != nil {
		return err
	}

	if m.CurrentTargetValue != nil {
		if err := m.CurrentTargetValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_target_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_target_value")
			}
			return err
		}
	}

	return nil
}

func (m *KeyResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *KeyResult) validateInitialObservedValue(formats strfmt.Registry) error {

	if err := validate.Required("initial_observed_value", "body", m.InitialObservedValue); err != nil {
		return err
	}

	if m.InitialObservedValue != nil {
		if err := m.InitialObservedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *KeyResult) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *KeyResult) validateObjectiveID(formats strfmt.Registry) error {

	if err := validate.Required("objective_id", "body", m.ObjectiveID); err != nil {
		return err
	}

	return nil
}

func (m *KeyResult) validateProgress(formats strfmt.Registry) error {

	if err := validate.Required("progress", "body", m.Progress); err != nil {
		return err
	}

	return nil
}

var keyResultTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["percent","boolean","numeric"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keyResultTypeTypePropEnum = append(keyResultTypeTypePropEnum, v)
	}
}

const (

	// KeyResultTypePercent captures enum value "percent"
	KeyResultTypePercent string = "percent"

	// KeyResultTypeBoolean captures enum value "boolean"
	KeyResultTypeBoolean string = "boolean"

	// KeyResultTypeNumeric captures enum value "numeric"
	KeyResultTypeNumeric string = "numeric"
)

// prop value enum
func (m *KeyResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keyResultTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeyResult) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this key result based on the context it is used
func (m *KeyResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentObservedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentTargetValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInitialObservedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KeyResult) contextValidateCurrentObservedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentObservedValue != nil {

		if err := m.CurrentObservedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_observed_value")
			}
			return err
		}
	}

	return nil
}

func (m *KeyResult) contextValidateCurrentTargetValue(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentTargetValue != nil {

		if err := m.CurrentTargetValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("current_target_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("current_target_value")
			}
			return err
		}
	}

	return nil
}

func (m *KeyResult) contextValidateInitialObservedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.InitialObservedValue != nil {

		if err := m.InitialObservedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("initial_observed_value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("initial_observed_value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KeyResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeyResult) UnmarshalBinary(b []byte) error {
	var res KeyResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
