// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetKeyResultParams creates a new GetKeyResultParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetKeyResultParams() *GetKeyResultParams {
	return &GetKeyResultParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetKeyResultParamsWithTimeout creates a new GetKeyResultParams object
// with the ability to set a timeout on a request.
func NewGetKeyResultParamsWithTimeout(timeout time.Duration) *GetKeyResultParams {
	return &GetKeyResultParams{
		timeout: timeout,
	}
}

// NewGetKeyResultParamsWithContext creates a new GetKeyResultParams object
// with the ability to set a context for a request.
func NewGetKeyResultParamsWithContext(ctx context.Context) *GetKeyResultParams {
	return &GetKeyResultParams{
		Context: ctx,
	}
}

// NewGetKeyResultParamsWithHTTPClient creates a new GetKeyResultParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetKeyResultParamsWithHTTPClient(client *http.Client) *GetKeyResultParams {
	return &GetKeyResultParams{
		HTTPClient: client,
	}
}

/*
GetKeyResultParams contains all the parameters to send to the API endpoint

	for the get key result operation.

	Typically these are written to a http.Request.
*/
type GetKeyResultParams struct {

	/* KeyResultPublicID.

	   The ID of the Key Result.

	   Format: uuid
	*/
	KeyResultPublicID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get key result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKeyResultParams) WithDefaults() *GetKeyResultParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get key result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKeyResultParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get key result params
func (o *GetKeyResultParams) WithTimeout(timeout time.Duration) *GetKeyResultParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get key result params
func (o *GetKeyResultParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get key result params
func (o *GetKeyResultParams) WithContext(ctx context.Context) *GetKeyResultParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get key result params
func (o *GetKeyResultParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get key result params
func (o *GetKeyResultParams) WithHTTPClient(client *http.Client) *GetKeyResultParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get key result params
func (o *GetKeyResultParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKeyResultPublicID adds the keyResultPublicID to the get key result params
func (o *GetKeyResultParams) WithKeyResultPublicID(keyResultPublicID strfmt.UUID) *GetKeyResultParams {
	o.SetKeyResultPublicID(keyResultPublicID)
	return o
}

// SetKeyResultPublicID adds the keyResultPublicId to the get key result params
func (o *GetKeyResultParams) SetKeyResultPublicID(keyResultPublicID strfmt.UUID) {
	o.KeyResultPublicID = keyResultPublicID
}

// WriteToRequest writes these params to a swagger request
func (o *GetKeyResultParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param key-result-public-id
	if err := r.SetPathParam("key-result-public-id", o.KeyResultPublicID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
