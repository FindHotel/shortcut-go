// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/FindHotel/shortcut-go/models"
)

// UpdateObjectiveReader is a Reader for the UpdateObjective structure.
type UpdateObjectiveReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateObjectiveReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateObjectiveOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateObjectiveBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateObjectiveNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateObjectiveUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v3/objectives/{objective-public-id}] updateObjective", response, response.Code())
	}
}

// NewUpdateObjectiveOK creates a UpdateObjectiveOK with default headers values
func NewUpdateObjectiveOK() *UpdateObjectiveOK {
	return &UpdateObjectiveOK{}
}

/*
UpdateObjectiveOK describes a response with status code 200, with default header values.

Resource
*/
type UpdateObjectiveOK struct {
	Payload *models.Objective
}

// IsSuccess returns true when this update objective o k response has a 2xx status code
func (o *UpdateObjectiveOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update objective o k response has a 3xx status code
func (o *UpdateObjectiveOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update objective o k response has a 4xx status code
func (o *UpdateObjectiveOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update objective o k response has a 5xx status code
func (o *UpdateObjectiveOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update objective o k response a status code equal to that given
func (o *UpdateObjectiveOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update objective o k response
func (o *UpdateObjectiveOK) Code() int {
	return 200
}

func (o *UpdateObjectiveOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveOK %s", 200, payload)
}

func (o *UpdateObjectiveOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveOK %s", 200, payload)
}

func (o *UpdateObjectiveOK) GetPayload() *models.Objective {
	return o.Payload
}

func (o *UpdateObjectiveOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Objective)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateObjectiveBadRequest creates a UpdateObjectiveBadRequest with default headers values
func NewUpdateObjectiveBadRequest() *UpdateObjectiveBadRequest {
	return &UpdateObjectiveBadRequest{}
}

/*
UpdateObjectiveBadRequest describes a response with status code 400, with default header values.

Schema mismatch
*/
type UpdateObjectiveBadRequest struct {
}

// IsSuccess returns true when this update objective bad request response has a 2xx status code
func (o *UpdateObjectiveBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update objective bad request response has a 3xx status code
func (o *UpdateObjectiveBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update objective bad request response has a 4xx status code
func (o *UpdateObjectiveBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update objective bad request response has a 5xx status code
func (o *UpdateObjectiveBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update objective bad request response a status code equal to that given
func (o *UpdateObjectiveBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update objective bad request response
func (o *UpdateObjectiveBadRequest) Code() int {
	return 400
}

func (o *UpdateObjectiveBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveBadRequest", 400)
}

func (o *UpdateObjectiveBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveBadRequest", 400)
}

func (o *UpdateObjectiveBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateObjectiveNotFound creates a UpdateObjectiveNotFound with default headers values
func NewUpdateObjectiveNotFound() *UpdateObjectiveNotFound {
	return &UpdateObjectiveNotFound{}
}

/*
UpdateObjectiveNotFound describes a response with status code 404, with default header values.

Resource does not exist
*/
type UpdateObjectiveNotFound struct {
}

// IsSuccess returns true when this update objective not found response has a 2xx status code
func (o *UpdateObjectiveNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update objective not found response has a 3xx status code
func (o *UpdateObjectiveNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update objective not found response has a 4xx status code
func (o *UpdateObjectiveNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update objective not found response has a 5xx status code
func (o *UpdateObjectiveNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update objective not found response a status code equal to that given
func (o *UpdateObjectiveNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update objective not found response
func (o *UpdateObjectiveNotFound) Code() int {
	return 404
}

func (o *UpdateObjectiveNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveNotFound", 404)
}

func (o *UpdateObjectiveNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveNotFound", 404)
}

func (o *UpdateObjectiveNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateObjectiveUnprocessableEntity creates a UpdateObjectiveUnprocessableEntity with default headers values
func NewUpdateObjectiveUnprocessableEntity() *UpdateObjectiveUnprocessableEntity {
	return &UpdateObjectiveUnprocessableEntity{}
}

/*
UpdateObjectiveUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable
*/
type UpdateObjectiveUnprocessableEntity struct {
}

// IsSuccess returns true when this update objective unprocessable entity response has a 2xx status code
func (o *UpdateObjectiveUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update objective unprocessable entity response has a 3xx status code
func (o *UpdateObjectiveUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update objective unprocessable entity response has a 4xx status code
func (o *UpdateObjectiveUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update objective unprocessable entity response has a 5xx status code
func (o *UpdateObjectiveUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update objective unprocessable entity response a status code equal to that given
func (o *UpdateObjectiveUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update objective unprocessable entity response
func (o *UpdateObjectiveUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateObjectiveUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveUnprocessableEntity", 422)
}

func (o *UpdateObjectiveUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/v3/objectives/{objective-public-id}][%d] updateObjectiveUnprocessableEntity", 422)
}

func (o *UpdateObjectiveUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
