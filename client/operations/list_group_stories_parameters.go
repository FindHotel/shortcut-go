// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListGroupStoriesParams creates a new ListGroupStoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListGroupStoriesParams() *ListGroupStoriesParams {
	return &ListGroupStoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListGroupStoriesParamsWithTimeout creates a new ListGroupStoriesParams object
// with the ability to set a timeout on a request.
func NewListGroupStoriesParamsWithTimeout(timeout time.Duration) *ListGroupStoriesParams {
	return &ListGroupStoriesParams{
		timeout: timeout,
	}
}

// NewListGroupStoriesParamsWithContext creates a new ListGroupStoriesParams object
// with the ability to set a context for a request.
func NewListGroupStoriesParamsWithContext(ctx context.Context) *ListGroupStoriesParams {
	return &ListGroupStoriesParams{
		Context: ctx,
	}
}

// NewListGroupStoriesParamsWithHTTPClient creates a new ListGroupStoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListGroupStoriesParamsWithHTTPClient(client *http.Client) *ListGroupStoriesParams {
	return &ListGroupStoriesParams{
		HTTPClient: client,
	}
}

/*
ListGroupStoriesParams contains all the parameters to send to the API endpoint

	for the list group stories operation.

	Typically these are written to a http.Request.
*/
type ListGroupStoriesParams struct {

	/* GroupPublicID.

	   The unique ID of the Group.

	   Format: uuid
	*/
	GroupPublicID strfmt.UUID

	/* Limit.

	   The maximum number of results to return. (Defaults to 1000, max 1000)

	   Format: int64
	*/
	Limit *int64

	/* Offset.

	   The offset at which to begin returning results. (Defaults to 0)

	   Format: int64
	*/
	Offset *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list group stories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListGroupStoriesParams) WithDefaults() *ListGroupStoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list group stories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListGroupStoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list group stories params
func (o *ListGroupStoriesParams) WithTimeout(timeout time.Duration) *ListGroupStoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list group stories params
func (o *ListGroupStoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list group stories params
func (o *ListGroupStoriesParams) WithContext(ctx context.Context) *ListGroupStoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list group stories params
func (o *ListGroupStoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list group stories params
func (o *ListGroupStoriesParams) WithHTTPClient(client *http.Client) *ListGroupStoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list group stories params
func (o *ListGroupStoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupPublicID adds the groupPublicID to the list group stories params
func (o *ListGroupStoriesParams) WithGroupPublicID(groupPublicID strfmt.UUID) *ListGroupStoriesParams {
	o.SetGroupPublicID(groupPublicID)
	return o
}

// SetGroupPublicID adds the groupPublicId to the list group stories params
func (o *ListGroupStoriesParams) SetGroupPublicID(groupPublicID strfmt.UUID) {
	o.GroupPublicID = groupPublicID
}

// WithLimit adds the limit to the list group stories params
func (o *ListGroupStoriesParams) WithLimit(limit *int64) *ListGroupStoriesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list group stories params
func (o *ListGroupStoriesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the list group stories params
func (o *ListGroupStoriesParams) WithOffset(offset *int64) *ListGroupStoriesParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the list group stories params
func (o *ListGroupStoriesParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WriteToRequest writes these params to a swagger request
func (o *ListGroupStoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param group-public-id
	if err := r.SetPathParam("group-public-id", o.GroupPublicID.String()); err != nil {
		return err
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64

		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {

			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
