// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/FindHotel/shortcut-go/models"
)

// SearchReader is a Reader for the Search structure.
type SearchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSearchUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /api/v3/search] search", response, response.Code())
	}
}

// NewSearchOK creates a SearchOK with default headers values
func NewSearchOK() *SearchOK {
	return &SearchOK{}
}

/*
SearchOK describes a response with status code 200, with default header values.

Resource
*/
type SearchOK struct {
	Payload *models.SearchResults
}

// IsSuccess returns true when this search o k response has a 2xx status code
func (o *SearchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search o k response has a 3xx status code
func (o *SearchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search o k response has a 4xx status code
func (o *SearchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search o k response has a 5xx status code
func (o *SearchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search o k response a status code equal to that given
func (o *SearchOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search o k response
func (o *SearchOK) Code() int {
	return 200
}

func (o *SearchOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v3/search][%d] searchOK %s", 200, payload)
}

func (o *SearchOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v3/search][%d] searchOK %s", 200, payload)
}

func (o *SearchOK) GetPayload() *models.SearchResults {
	return o.Payload
}

func (o *SearchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SearchResults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchBadRequest creates a SearchBadRequest with default headers values
func NewSearchBadRequest() *SearchBadRequest {
	return &SearchBadRequest{}
}

/*
SearchBadRequest describes a response with status code 400, with default header values.

**Either:** (1) Schema mismatch **or** (2) Maximum of 1000 search results exceeded
*/
type SearchBadRequest struct {
	Payload *models.MaxSearchResultsExceededError
}

// IsSuccess returns true when this search bad request response has a 2xx status code
func (o *SearchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search bad request response has a 3xx status code
func (o *SearchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search bad request response has a 4xx status code
func (o *SearchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search bad request response has a 5xx status code
func (o *SearchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search bad request response a status code equal to that given
func (o *SearchBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the search bad request response
func (o *SearchBadRequest) Code() int {
	return 400
}

func (o *SearchBadRequest) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v3/search][%d] searchBadRequest %s", 400, payload)
}

func (o *SearchBadRequest) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /api/v3/search][%d] searchBadRequest %s", 400, payload)
}

func (o *SearchBadRequest) GetPayload() *models.MaxSearchResultsExceededError {
	return o.Payload
}

func (o *SearchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MaxSearchResultsExceededError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchNotFound creates a SearchNotFound with default headers values
func NewSearchNotFound() *SearchNotFound {
	return &SearchNotFound{}
}

/*
SearchNotFound describes a response with status code 404, with default header values.

Resource does not exist
*/
type SearchNotFound struct {
}

// IsSuccess returns true when this search not found response has a 2xx status code
func (o *SearchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search not found response has a 3xx status code
func (o *SearchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search not found response has a 4xx status code
func (o *SearchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search not found response has a 5xx status code
func (o *SearchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search not found response a status code equal to that given
func (o *SearchNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the search not found response
func (o *SearchNotFound) Code() int {
	return 404
}

func (o *SearchNotFound) Error() string {
	return fmt.Sprintf("[GET /api/v3/search][%d] searchNotFound", 404)
}

func (o *SearchNotFound) String() string {
	return fmt.Sprintf("[GET /api/v3/search][%d] searchNotFound", 404)
}

func (o *SearchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSearchUnprocessableEntity creates a SearchUnprocessableEntity with default headers values
func NewSearchUnprocessableEntity() *SearchUnprocessableEntity {
	return &SearchUnprocessableEntity{}
}

/*
SearchUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable
*/
type SearchUnprocessableEntity struct {
}

// IsSuccess returns true when this search unprocessable entity response has a 2xx status code
func (o *SearchUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search unprocessable entity response has a 3xx status code
func (o *SearchUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search unprocessable entity response has a 4xx status code
func (o *SearchUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this search unprocessable entity response has a 5xx status code
func (o *SearchUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this search unprocessable entity response a status code equal to that given
func (o *SearchUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the search unprocessable entity response
func (o *SearchUnprocessableEntity) Code() int {
	return 422
}

func (o *SearchUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /api/v3/search][%d] searchUnprocessableEntity", 422)
}

func (o *SearchUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /api/v3/search][%d] searchUnprocessableEntity", 422)
}

func (o *SearchUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
