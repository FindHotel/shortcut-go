// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUnlinkCommentThreadFromSlackParams creates a new UnlinkCommentThreadFromSlackParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUnlinkCommentThreadFromSlackParams() *UnlinkCommentThreadFromSlackParams {
	return &UnlinkCommentThreadFromSlackParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUnlinkCommentThreadFromSlackParamsWithTimeout creates a new UnlinkCommentThreadFromSlackParams object
// with the ability to set a timeout on a request.
func NewUnlinkCommentThreadFromSlackParamsWithTimeout(timeout time.Duration) *UnlinkCommentThreadFromSlackParams {
	return &UnlinkCommentThreadFromSlackParams{
		timeout: timeout,
	}
}

// NewUnlinkCommentThreadFromSlackParamsWithContext creates a new UnlinkCommentThreadFromSlackParams object
// with the ability to set a context for a request.
func NewUnlinkCommentThreadFromSlackParamsWithContext(ctx context.Context) *UnlinkCommentThreadFromSlackParams {
	return &UnlinkCommentThreadFromSlackParams{
		Context: ctx,
	}
}

// NewUnlinkCommentThreadFromSlackParamsWithHTTPClient creates a new UnlinkCommentThreadFromSlackParams object
// with the ability to set a custom HTTPClient for a request.
func NewUnlinkCommentThreadFromSlackParamsWithHTTPClient(client *http.Client) *UnlinkCommentThreadFromSlackParams {
	return &UnlinkCommentThreadFromSlackParams{
		HTTPClient: client,
	}
}

/*
UnlinkCommentThreadFromSlackParams contains all the parameters to send to the API endpoint

	for the unlink comment thread from slack operation.

	Typically these are written to a http.Request.
*/
type UnlinkCommentThreadFromSlackParams struct {

	/* CommentPublicID.

	   The ID of the Comment to unlink.

	   Format: int64
	*/
	CommentPublicID int64

	/* StoryPublicID.

	   The ID of the Story to unlink.

	   Format: int64
	*/
	StoryPublicID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the unlink comment thread from slack params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnlinkCommentThreadFromSlackParams) WithDefaults() *UnlinkCommentThreadFromSlackParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the unlink comment thread from slack params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UnlinkCommentThreadFromSlackParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) WithTimeout(timeout time.Duration) *UnlinkCommentThreadFromSlackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) WithContext(ctx context.Context) *UnlinkCommentThreadFromSlackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) WithHTTPClient(client *http.Client) *UnlinkCommentThreadFromSlackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCommentPublicID adds the commentPublicID to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) WithCommentPublicID(commentPublicID int64) *UnlinkCommentThreadFromSlackParams {
	o.SetCommentPublicID(commentPublicID)
	return o
}

// SetCommentPublicID adds the commentPublicId to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) SetCommentPublicID(commentPublicID int64) {
	o.CommentPublicID = commentPublicID
}

// WithStoryPublicID adds the storyPublicID to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) WithStoryPublicID(storyPublicID int64) *UnlinkCommentThreadFromSlackParams {
	o.SetStoryPublicID(storyPublicID)
	return o
}

// SetStoryPublicID adds the storyPublicId to the unlink comment thread from slack params
func (o *UnlinkCommentThreadFromSlackParams) SetStoryPublicID(storyPublicID int64) {
	o.StoryPublicID = storyPublicID
}

// WriteToRequest writes these params to a swagger request
func (o *UnlinkCommentThreadFromSlackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param comment-public-id
	if err := r.SetPathParam("comment-public-id", swag.FormatInt64(o.CommentPublicID)); err != nil {
		return err
	}

	// path param story-public-id
	if err := r.SetPathParam("story-public-id", swag.FormatInt64(o.StoryPublicID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
