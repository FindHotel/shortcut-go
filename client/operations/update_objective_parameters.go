// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/FindHotel/shortcut-go/models"
)

// NewUpdateObjectiveParams creates a new UpdateObjectiveParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateObjectiveParams() *UpdateObjectiveParams {
	return &UpdateObjectiveParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateObjectiveParamsWithTimeout creates a new UpdateObjectiveParams object
// with the ability to set a timeout on a request.
func NewUpdateObjectiveParamsWithTimeout(timeout time.Duration) *UpdateObjectiveParams {
	return &UpdateObjectiveParams{
		timeout: timeout,
	}
}

// NewUpdateObjectiveParamsWithContext creates a new UpdateObjectiveParams object
// with the ability to set a context for a request.
func NewUpdateObjectiveParamsWithContext(ctx context.Context) *UpdateObjectiveParams {
	return &UpdateObjectiveParams{
		Context: ctx,
	}
}

// NewUpdateObjectiveParamsWithHTTPClient creates a new UpdateObjectiveParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateObjectiveParamsWithHTTPClient(client *http.Client) *UpdateObjectiveParams {
	return &UpdateObjectiveParams{
		HTTPClient: client,
	}
}

/*
UpdateObjectiveParams contains all the parameters to send to the API endpoint

	for the update objective operation.

	Typically these are written to a http.Request.
*/
type UpdateObjectiveParams struct {

	// UpdateObjective.
	UpdateObjective *models.UpdateObjective

	/* ObjectivePublicID.

	   The ID of the Objective.

	   Format: int64
	*/
	ObjectivePublicID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update objective params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateObjectiveParams) WithDefaults() *UpdateObjectiveParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update objective params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateObjectiveParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update objective params
func (o *UpdateObjectiveParams) WithTimeout(timeout time.Duration) *UpdateObjectiveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update objective params
func (o *UpdateObjectiveParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update objective params
func (o *UpdateObjectiveParams) WithContext(ctx context.Context) *UpdateObjectiveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update objective params
func (o *UpdateObjectiveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update objective params
func (o *UpdateObjectiveParams) WithHTTPClient(client *http.Client) *UpdateObjectiveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update objective params
func (o *UpdateObjectiveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUpdateObjective adds the updateObjective to the update objective params
func (o *UpdateObjectiveParams) WithUpdateObjective(updateObjective *models.UpdateObjective) *UpdateObjectiveParams {
	o.SetUpdateObjective(updateObjective)
	return o
}

// SetUpdateObjective adds the updateObjective to the update objective params
func (o *UpdateObjectiveParams) SetUpdateObjective(updateObjective *models.UpdateObjective) {
	o.UpdateObjective = updateObjective
}

// WithObjectivePublicID adds the objectivePublicID to the update objective params
func (o *UpdateObjectiveParams) WithObjectivePublicID(objectivePublicID int64) *UpdateObjectiveParams {
	o.SetObjectivePublicID(objectivePublicID)
	return o
}

// SetObjectivePublicID adds the objectivePublicId to the update objective params
func (o *UpdateObjectiveParams) SetObjectivePublicID(objectivePublicID int64) {
	o.ObjectivePublicID = objectivePublicID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateObjectiveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.UpdateObjective != nil {
		if err := r.SetBodyParam(o.UpdateObjective); err != nil {
			return err
		}
	}

	// path param objective-public-id
	if err := r.SetPathParam("objective-public-id", swag.FormatInt64(o.ObjectivePublicID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
