// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/FindHotel/shortcut-go/models"
)

// UpdateEpicReader is a Reader for the UpdateEpic structure.
type UpdateEpicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateEpicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateEpicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateEpicBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateEpicNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateEpicUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[PUT /api/v3/epics/{epic-public-id}] updateEpic", response, response.Code())
	}
}

// NewUpdateEpicOK creates a UpdateEpicOK with default headers values
func NewUpdateEpicOK() *UpdateEpicOK {
	return &UpdateEpicOK{}
}

/*
UpdateEpicOK describes a response with status code 200, with default header values.

Resource
*/
type UpdateEpicOK struct {
	Payload *models.Epic
}

// IsSuccess returns true when this update epic o k response has a 2xx status code
func (o *UpdateEpicOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update epic o k response has a 3xx status code
func (o *UpdateEpicOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update epic o k response has a 4xx status code
func (o *UpdateEpicOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update epic o k response has a 5xx status code
func (o *UpdateEpicOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update epic o k response a status code equal to that given
func (o *UpdateEpicOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update epic o k response
func (o *UpdateEpicOK) Code() int {
	return 200
}

func (o *UpdateEpicOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicOK %s", 200, payload)
}

func (o *UpdateEpicOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicOK %s", 200, payload)
}

func (o *UpdateEpicOK) GetPayload() *models.Epic {
	return o.Payload
}

func (o *UpdateEpicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Epic)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateEpicBadRequest creates a UpdateEpicBadRequest with default headers values
func NewUpdateEpicBadRequest() *UpdateEpicBadRequest {
	return &UpdateEpicBadRequest{}
}

/*
UpdateEpicBadRequest describes a response with status code 400, with default header values.

Schema mismatch
*/
type UpdateEpicBadRequest struct {
}

// IsSuccess returns true when this update epic bad request response has a 2xx status code
func (o *UpdateEpicBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update epic bad request response has a 3xx status code
func (o *UpdateEpicBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update epic bad request response has a 4xx status code
func (o *UpdateEpicBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update epic bad request response has a 5xx status code
func (o *UpdateEpicBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update epic bad request response a status code equal to that given
func (o *UpdateEpicBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the update epic bad request response
func (o *UpdateEpicBadRequest) Code() int {
	return 400
}

func (o *UpdateEpicBadRequest) Error() string {
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicBadRequest", 400)
}

func (o *UpdateEpicBadRequest) String() string {
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicBadRequest", 400)
}

func (o *UpdateEpicBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEpicNotFound creates a UpdateEpicNotFound with default headers values
func NewUpdateEpicNotFound() *UpdateEpicNotFound {
	return &UpdateEpicNotFound{}
}

/*
UpdateEpicNotFound describes a response with status code 404, with default header values.

Resource does not exist
*/
type UpdateEpicNotFound struct {
}

// IsSuccess returns true when this update epic not found response has a 2xx status code
func (o *UpdateEpicNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update epic not found response has a 3xx status code
func (o *UpdateEpicNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update epic not found response has a 4xx status code
func (o *UpdateEpicNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update epic not found response has a 5xx status code
func (o *UpdateEpicNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update epic not found response a status code equal to that given
func (o *UpdateEpicNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update epic not found response
func (o *UpdateEpicNotFound) Code() int {
	return 404
}

func (o *UpdateEpicNotFound) Error() string {
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicNotFound", 404)
}

func (o *UpdateEpicNotFound) String() string {
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicNotFound", 404)
}

func (o *UpdateEpicNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateEpicUnprocessableEntity creates a UpdateEpicUnprocessableEntity with default headers values
func NewUpdateEpicUnprocessableEntity() *UpdateEpicUnprocessableEntity {
	return &UpdateEpicUnprocessableEntity{}
}

/*
UpdateEpicUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable
*/
type UpdateEpicUnprocessableEntity struct {
}

// IsSuccess returns true when this update epic unprocessable entity response has a 2xx status code
func (o *UpdateEpicUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update epic unprocessable entity response has a 3xx status code
func (o *UpdateEpicUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update epic unprocessable entity response has a 4xx status code
func (o *UpdateEpicUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update epic unprocessable entity response has a 5xx status code
func (o *UpdateEpicUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update epic unprocessable entity response a status code equal to that given
func (o *UpdateEpicUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update epic unprocessable entity response
func (o *UpdateEpicUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateEpicUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicUnprocessableEntity", 422)
}

func (o *UpdateEpicUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /api/v3/epics/{epic-public-id}][%d] updateEpicUnprocessableEntity", 422)
}

func (o *UpdateEpicUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}
