// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/FindHotel/shortcut-go/models"
)

// NewUpdateKeyResultParams creates a new UpdateKeyResultParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateKeyResultParams() *UpdateKeyResultParams {
	return &UpdateKeyResultParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateKeyResultParamsWithTimeout creates a new UpdateKeyResultParams object
// with the ability to set a timeout on a request.
func NewUpdateKeyResultParamsWithTimeout(timeout time.Duration) *UpdateKeyResultParams {
	return &UpdateKeyResultParams{
		timeout: timeout,
	}
}

// NewUpdateKeyResultParamsWithContext creates a new UpdateKeyResultParams object
// with the ability to set a context for a request.
func NewUpdateKeyResultParamsWithContext(ctx context.Context) *UpdateKeyResultParams {
	return &UpdateKeyResultParams{
		Context: ctx,
	}
}

// NewUpdateKeyResultParamsWithHTTPClient creates a new UpdateKeyResultParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateKeyResultParamsWithHTTPClient(client *http.Client) *UpdateKeyResultParams {
	return &UpdateKeyResultParams{
		HTTPClient: client,
	}
}

/*
UpdateKeyResultParams contains all the parameters to send to the API endpoint

	for the update key result operation.

	Typically these are written to a http.Request.
*/
type UpdateKeyResultParams struct {

	// UpdateKeyResult.
	UpdateKeyResult *models.UpdateKeyResult

	/* KeyResultPublicID.

	   The ID of the Key Result.

	   Format: uuid
	*/
	KeyResultPublicID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update key result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateKeyResultParams) WithDefaults() *UpdateKeyResultParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update key result params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateKeyResultParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update key result params
func (o *UpdateKeyResultParams) WithTimeout(timeout time.Duration) *UpdateKeyResultParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update key result params
func (o *UpdateKeyResultParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update key result params
func (o *UpdateKeyResultParams) WithContext(ctx context.Context) *UpdateKeyResultParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update key result params
func (o *UpdateKeyResultParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update key result params
func (o *UpdateKeyResultParams) WithHTTPClient(client *http.Client) *UpdateKeyResultParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update key result params
func (o *UpdateKeyResultParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUpdateKeyResult adds the updateKeyResult to the update key result params
func (o *UpdateKeyResultParams) WithUpdateKeyResult(updateKeyResult *models.UpdateKeyResult) *UpdateKeyResultParams {
	o.SetUpdateKeyResult(updateKeyResult)
	return o
}

// SetUpdateKeyResult adds the updateKeyResult to the update key result params
func (o *UpdateKeyResultParams) SetUpdateKeyResult(updateKeyResult *models.UpdateKeyResult) {
	o.UpdateKeyResult = updateKeyResult
}

// WithKeyResultPublicID adds the keyResultPublicID to the update key result params
func (o *UpdateKeyResultParams) WithKeyResultPublicID(keyResultPublicID strfmt.UUID) *UpdateKeyResultParams {
	o.SetKeyResultPublicID(keyResultPublicID)
	return o
}

// SetKeyResultPublicID adds the keyResultPublicId to the update key result params
func (o *UpdateKeyResultParams) SetKeyResultPublicID(keyResultPublicID strfmt.UUID) {
	o.KeyResultPublicID = keyResultPublicID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateKeyResultParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.UpdateKeyResult != nil {
		if err := r.SetBodyParam(o.UpdateKeyResult); err != nil {
			return err
		}
	}

	// path param key-result-public-id
	if err := r.SetPathParam("key-result-public-id", o.KeyResultPublicID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
