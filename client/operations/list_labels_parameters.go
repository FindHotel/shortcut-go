// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListLabelsParams creates a new ListLabelsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListLabelsParams() *ListLabelsParams {
	return &ListLabelsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListLabelsParamsWithTimeout creates a new ListLabelsParams object
// with the ability to set a timeout on a request.
func NewListLabelsParamsWithTimeout(timeout time.Duration) *ListLabelsParams {
	return &ListLabelsParams{
		timeout: timeout,
	}
}

// NewListLabelsParamsWithContext creates a new ListLabelsParams object
// with the ability to set a context for a request.
func NewListLabelsParamsWithContext(ctx context.Context) *ListLabelsParams {
	return &ListLabelsParams{
		Context: ctx,
	}
}

// NewListLabelsParamsWithHTTPClient creates a new ListLabelsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListLabelsParamsWithHTTPClient(client *http.Client) *ListLabelsParams {
	return &ListLabelsParams{
		HTTPClient: client,
	}
}

/*
ListLabelsParams contains all the parameters to send to the API endpoint

	for the list labels operation.

	Typically these are written to a http.Request.
*/
type ListLabelsParams struct {

	/* Slim.

	   A true/false boolean indicating if the slim versions of the Label should be returned.
	*/
	Slim *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list labels params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListLabelsParams) WithDefaults() *ListLabelsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list labels params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListLabelsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list labels params
func (o *ListLabelsParams) WithTimeout(timeout time.Duration) *ListLabelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list labels params
func (o *ListLabelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list labels params
func (o *ListLabelsParams) WithContext(ctx context.Context) *ListLabelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list labels params
func (o *ListLabelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list labels params
func (o *ListLabelsParams) WithHTTPClient(client *http.Client) *ListLabelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list labels params
func (o *ListLabelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSlim adds the slim to the list labels params
func (o *ListLabelsParams) WithSlim(slim *bool) *ListLabelsParams {
	o.SetSlim(slim)
	return o
}

// SetSlim adds the slim to the list labels params
func (o *ListLabelsParams) SetSlim(slim *bool) {
	o.Slim = slim
}

// WriteToRequest writes these params to a swagger request
func (o *ListLabelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Slim != nil {

		// query param slim
		var qrSlim bool

		if o.Slim != nil {
			qrSlim = *o.Slim
		}
		qSlim := swag.FormatBool(qrSlim)
		if qSlim != "" {

			if err := r.SetQueryParam("slim", qSlim); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
